@using TaskManager.Models
@model UserProfileViewModel
@{
    ViewData["Title"] = "Thông Tin Cá Nhân";
}

@Html.AntiForgeryToken()

@section Styles {
    <style>
        .card {
            border: none;
            border-radius: 1rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .card-body {
            padding: 1.5rem;
        }

        hr {
            margin: 1.5rem 0;
        }

        .text-muted {
            color: #6c757d !important;
        }

        .rounded-circle {
            border: 3px solid #fff;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .task-stats {
            transition: transform 0.2s;
        }

        .task-stats:hover {
            transform: translateY(-5px);
        }

        .recent-tasks {
            max-height: 300px;
            overflow-y: auto;
        }

        .task-item {
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            background-color: #f8f9fa;
            transition: background-color 0.2s;
        }

        .task-item:hover {
            background-color: #e9ecef;
        }

        .table {
            margin-bottom: 0;
        }

        .table th {
            border-top: none;
            font-weight: 600;
            padding: 1rem;
        }

        .table td {
            padding: 1rem;
            vertical-align: middle;
        }

        .badge {
            padding: 0.5rem 1rem;
            font-weight: 500;
            font-size: 0.875rem;
        }
    </style>
}

<div class="container py-5">
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body text-center">
                    <img src="@Model.Picture" alt="Profile Picture" class="rounded-circle img-fluid" style="width: 150px;">
                    <div class="profile-info mt-3">
                        <h5 class="card-title">@await Component.InvokeAsync("UserName")</h5>
                        <p class="card-text">@Model.Email</p>
                        <p class="card-text"><small class="text-muted">Tham gia từ @Model.CreatedAt.ToString("dd/MM/yyyy")</small></p>
                    </div>
                    <div class="d-flex justify-content-center mt-3">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editProfileModal">
                            <i class="fas fa-user-edit me-2"></i>Chỉnh sửa thông tin
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-3">
                            <p class="mb-0">Họ và tên</p>
                        </div>
                        <div class="col-sm-9">
                            <p class="text-muted mb-0">@Model.Name</p>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-sm-3">
                            <p class="mb-0">Email</p>
                        </div>
                        <div class="col-sm-9">
                            <p class="text-muted mb-0">@Model.Email</p>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-sm-3">
                            <p class="mb-0">Ngày tham gia</p>
                        </div>
                        <div class="col-sm-9">
                            <p class="text-muted mb-0">@Model.CreatedAt.ToString("dd/MM/yyyy")</p>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-sm-3">
                            <p class="mb-0">ID Người Dùng</p>
                        </div>
                        <div class="col-sm-9">
                            <p class="text-muted mb-0">@Model.UserId</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="mb-3">Thống Kê Công Việc</h5>
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <div class="card bg-primary text-white task-stats">
                                <div class="card-body text-center">
                                    <h3 class="card-title">@ViewBag.TodoCount</h3>
                                    <p class="card-text">Cần Làm</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card bg-info text-white task-stats">
                                <div class="card-body text-center">
                                    <h3 class="card-title">@ViewBag.InProgressCount</h3>
                                    <p class="card-text">Đang Làm</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card bg-success text-white task-stats">
                                <div class="card-body text-center">
                                    <h3 class="card-title">@ViewBag.CompletedCount</h3>
                                    <p class="card-text">Hoàn Thành</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card bg-danger text-white task-stats">
                                <div class="card-body text-center">
                                    <h3 class="card-title">@ViewBag.CancelledCount</h3>
                                    <p class="card-text">Đã Hủy</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="mt-4">
                        <canvas id="taskChart"></canvas>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="card mb-4 mb-md-0">
                        <div class="card-body">
                            <h5 class="mb-4">
                                <i class="fas fa-history me-2"></i>Công Việc Gần Đây
                            </h5>
                            @if (Model.RecentTasks.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>Tiêu đề</th>
                                                <th>Trạng thái</th>
                                                <th>Ngày tạo</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var task in Model.RecentTasks)
                                            {
                                                <tr>
                                                    <td>@task.Title</td>
                                                    <td>
                                                        @{
                                                            string badgeClass = task.Status switch
                                                            {
                                                                TaskManager.Models.TaskStatus.Todo => "bg-secondary",
                                                                TaskManager.Models.TaskStatus.InProgress => "bg-info",
                                                                TaskManager.Models.TaskStatus.Completed => "bg-success",
                                                                TaskManager.Models.TaskStatus.Cancelled => "bg-danger",
                                                                _ => "bg-secondary"
                                                            };

                                                            string statusText = task.Status switch
                                                            {
                                                                TaskManager.Models.TaskStatus.Todo => "Cần làm",
                                                                TaskManager.Models.TaskStatus.InProgress => "Đang thực hiện",
                                                                TaskManager.Models.TaskStatus.Completed => "Hoàn thành",
                                                                TaskManager.Models.TaskStatus.Cancelled => "Đã hủy bỏ",
                                                                _ => "Không xác định"
                                                            };
                                                        }
                                                        <span class="badge @badgeClass">@statusText</span>
                                                    </td>
                                                    <td>@task.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <p class="text-muted text-center">Chưa có công việc nào được tạo.</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal chỉnh sửa thông tin -->
<div class="modal fade" id="editProfileModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-edit me-2"></i>Chỉnh Sửa Thông Tin
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editProfileForm" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="name" class="form-label">Họ và tên</label>
                        <input type="text" class="form-control" id="name" name="name" value="@Model.Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="picture" class="form-label">Ảnh đại diện</label>
                        <input type="file" class="form-control" id="picture" name="picture" accept=".jpg,.jpeg,.png,.gif">
                        <small class="text-muted">Chọn ảnh có định dạng .jpg, .jpeg, .png hoặc .gif</small>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-2"></i>Đóng
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>Lưu Thay Đổi
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <script>
        // Khởi tạo biểu đồ
        const ctx = document.getElementById('taskChart').getContext('2d');
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Cần Làm', 'Đang Làm', 'Hoàn Thành', 'Đã Hủy'],
                datasets: [{
                    data: [@ViewBag.TodoCount, @ViewBag.InProgressCount, @ViewBag.CompletedCount, @ViewBag.CancelledCount],
                    backgroundColor: [
                        '#0d6efd',
                        '#0dcaf0',
                        '#198754',
                        '#dc3545'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Xử lý form chỉnh sửa thông tin
        const editProfileForm = document.getElementById('editProfileForm');
        if (editProfileForm) {
            editProfileForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = new FormData();
                const name = document.getElementById('name').value.trim();
                
                if (name) formData.append('name', name);

                const pictureInput = document.getElementById('picture');
                if (pictureInput && pictureInput.files.length > 0) {
                    formData.append('picture', pictureInput.files[0]);
                }

                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenInput) {
                    showToast('Lỗi xác thực form', 'error');
                    return;
                }

                try {
                    const response = await fetch('/api/profile/update', {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': tokenInput.value
                        },
                        body: formData
                    });

                    const data = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(data.message || 'Có lỗi xảy ra khi cập nhật thông tin');
                    }

                    if (data.success) {
                        // Cập nhật tên trong profile
                        const profileName = document.querySelector('.profile-info h5.card-title');
                        if (profileName) {
                            profileName.textContent = data.data.name;
                        }

                        // Cập nhật tên trong thông tin chi tiết
                        const detailName = document.querySelector('.text-muted.mb-0');
                        if (detailName) {
                            detailName.textContent = data.data.name;
                        }

                        // Cập nhật ảnh đại diện nếu có
                        if (data.data.picture) {
                            const profilePictures = document.querySelectorAll('img[alt="Profile Picture"]');
                            profilePictures.forEach(img => {
                                img.src = data.data.picture;
                            });
                        }
                        
                        // Đóng modal và hiển thị thông báo
                        const modal = bootstrap.Modal.getInstance(document.getElementById('editProfileModal'));
                        if (modal) {
                            modal.hide();
                        }
                        
                        showToast('Cập nhật thông tin thành công', 'success');
                        
                        // Reload trang sau 1 giây
                        setTimeout(() => window.location.reload(), 1000);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showToast(error.message || 'Có lỗi xảy ra khi cập nhật thông tin', 'error');
                }
            });
        }

        function showToast(message, type = 'success') {
            Toastify({
                text: message,
                duration: 3000,
                close: true,
                gravity: "top",
                position: "right",
                style: {
                    background: type === 'success' ? "#198754" : "#dc3545"
                }
            }).showToast();
        }
    </script>
} 